{
  "version": 3,
  "sources": ["code.ts"],
  "sourcesContent": ["figma.showUI(__html__, { width: 240, height: 100 });\n\nfigma.ui.onmessage = async msg => {\n  if (msg.type === 'button-clicked') {\n    const allImages = await selectAllImagesInSelectedFrames();\n    if (allImages.length > 0) {\n      for (let imageNode of allImages) {\n        if ('fills' in imageNode) {\n          const fills = imageNode.fills as ReadonlyArray<Paint>;\n          for (const fill of fills) {\n            if (fill.type === 'IMAGE' && 'imageHash' in fill && fill.visible !== false) {\n              const image = figma.getImageByHash(fill.imageHash!);\n              if (image) {\n                const imageBytes = await image.getBytesAsync();\n                figma.ui.postMessage({\n                  type: 'image-data',\n                  imageBytes: [...imageBytes],\n                  fileName: `${imageNode.name || 'image'}.png`\n                });\n              }\n            }\n          }\n        }\n      }\n      figma.ui.postMessage({ type: 'download-complete' });\n    } else {\n      console.log(\"No images found in the selected frames.\");\n      figma.closePlugin(\"No images found.\");\n    }\n  }\n};\n\nasync function selectAllImagesInSelectedFrames(): Promise<SceneNode[]> {\n  const selectedNodes = figma.currentPage.selection;\n  const selectedFrames = selectedNodes.filter(node => node.type === 'FRAME') as FrameNode[];\n\n  if (selectedFrames.length === 0) {\n    console.log(\"No selected frame(s) found.\");\n    return [];\n  }\n\n  let allImages: SceneNode[] = [];\n  selectedFrames.forEach(frame => {\n    allImages = allImages.concat(findAllImages(frame, []));\n  });\n\n  return allImages;\n}\n\nfunction findAllImages(node: SceneNode, images: SceneNode[]): SceneNode[] {\n  if ('fills' in node) {\n    const fills = node.fills as ReadonlyArray<Paint>;\n    for (const fill of fills) {\n      if (fill.type === 'IMAGE' && 'imageHash' in fill && fill.visible !== false) {\n        images.push(node);\n      }\n    }\n  }\n\n  if ('children' in node) {\n    node.children.forEach((child: SceneNode) => {\n      findAllImages(child, images);\n    });\n  }\n\n  return images;\n}\n"],
  "mappings": "mBAAA,MAAM,OAAO,SAAU,CAAE,MAAO,IAAK,OAAQ,GAAI,CAAC,EAElD,MAAM,GAAG,UAAY,MAAMA,GAAO,CAChC,GAAIA,EAAI,OAAS,iBAAkB,CACjC,IAAMC,EAAY,MAAMC,EAAgC,EACxD,GAAID,EAAU,OAAS,EAAG,CACxB,QAASE,KAAaF,EACpB,GAAI,UAAWE,EAAW,CACxB,IAAMC,EAAQD,EAAU,MACxB,QAAWE,KAAQD,EACjB,GAAIC,EAAK,OAAS,SAAW,cAAeA,GAAQA,EAAK,UAAY,GAAO,CAC1E,IAAMC,EAAQ,MAAM,eAAeD,EAAK,SAAU,EAClD,GAAIC,EAAO,CACT,IAAMC,EAAa,MAAMD,EAAM,cAAc,EAC7C,MAAM,GAAG,YAAY,CACnB,KAAM,aACN,WAAY,CAAC,GAAGC,CAAU,EAC1B,SAAU,GAAG,OAAAJ,EAAU,MAAQ,QAAO,OACxC,CAAC,CACH,CACF,CAEJ,CAEF,MAAM,GAAG,YAAY,CAAE,KAAM,mBAAoB,CAAC,CACpD,MACE,QAAQ,IAAI,yCAAyC,EACrD,MAAM,YAAY,kBAAkB,CAExC,CACF,EAEA,eAAeD,GAAwD,CAErE,IAAMM,EADgB,MAAM,YAAY,UACH,OAAOC,GAAQA,EAAK,OAAS,OAAO,EAEzE,GAAID,EAAe,SAAW,EAC5B,eAAQ,IAAI,6BAA6B,EAClC,CAAC,EAGV,IAAIP,EAAyB,CAAC,EAC9B,OAAAO,EAAe,QAAQE,GAAS,CAC9BT,EAAYA,EAAU,OAAOU,EAAcD,EAAO,CAAC,CAAC,CAAC,CACvD,CAAC,EAEMT,CACT,CAEA,SAASU,EAAcF,EAAiBG,EAAkC,CACxE,GAAI,UAAWH,EAAM,CACnB,IAAML,EAAQK,EAAK,MACnB,QAAWJ,KAAQD,EACbC,EAAK,OAAS,SAAW,cAAeA,GAAQA,EAAK,UAAY,IACnEO,EAAO,KAAKH,CAAI,CAGtB,CAEA,MAAI,aAAcA,GAChBA,EAAK,SAAS,QAASI,GAAqB,CAC1CF,EAAcE,EAAOD,CAAM,CAC7B,CAAC,EAGIA,CACT",
  "names": ["msg", "allImages", "selectAllImagesInSelectedFrames", "imageNode", "fills", "fill", "image", "imageBytes", "selectedFrames", "node", "frame", "findAllImages", "images", "child"]
}
